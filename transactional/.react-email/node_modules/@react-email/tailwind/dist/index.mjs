// src/tailwind.tsx
import * as React from "react";
import { renderToStaticMarkup } from "react-dom/server";
import htmlParser, { attributesToProps, Element } from "html-react-parser";
import { tailwindToCSS } from "tw-to-css";
import { Fragment, jsx } from "react/jsx-runtime";
var Tailwind = ({ children, config }) => {
  const { twi } = tailwindToCSS({
    config
  });
  const newChildren = React.Children.toArray(children);
  const fullHTML = renderToStaticMarkup(/* @__PURE__ */ jsx(Fragment, { children: newChildren }));
  const headStyle = getMediaQueryCSS(
    twi(fullHTML, {
      merge: false,
      ignoreMediaQueries: false
    })
  );
  const hasResponsiveStyles = /@media[^{]+\{(?<content>[\s\S]+?)\}\s*\}/gm.test(
    headStyle
  );
  const hasHTML = /<html[^>]*>/gm.test(fullHTML);
  const hasHead = /<head[^>]*>/gm.test(fullHTML);
  if (hasResponsiveStyles && !hasHTML && !hasHead) {
    throw new Error(
      "Tailwind: To use responsive styles you must have a <html> and <head> element in your template."
    );
  }
  const reactHTML = React.Children.map(newChildren, (child) => {
    if (!React.isValidElement(child))
      return child;
    const html = renderToStaticMarkup(child);
    const parsedHTML = htmlParser(html, {
      replace: (domNode) => {
        var _a;
        if (domNode instanceof Element) {
          if (hasResponsiveStyles && hasHead && domNode.name === "head") {
            let newDomNode = null;
            if (domNode.children) {
              const style = domNode.children.find(
                (child2) => child2 instanceof Element && child2.name === "style"
              );
              const props = attributesToProps(domNode.attribs);
              newDomNode = /* @__PURE__ */ jsx("head", { ...props, children: style && style instanceof Element ? /* @__PURE__ */ jsx("style", { children: `${style.children} ${headStyle}` }) : /* @__PURE__ */ jsx("style", { children: headStyle }) });
            }
            return newDomNode;
          }
          if ((_a = domNode.attribs) == null ? void 0 : _a.class) {
            if (hasResponsiveStyles) {
              domNode.attribs.class = domNode.attribs.class.replace(
                /[:#\!\-[\]\/\.%]+/g,
                "_"
              );
            } else {
              const currentStyles = domNode.attribs.style ? `${domNode.attribs.style};` : "";
              const tailwindStyles = twi(domNode.attribs.class);
              domNode.attribs.style = `${currentStyles} ${tailwindStyles}`;
              delete domNode.attribs.class;
            }
          }
        }
      }
    });
    return parsedHTML;
  });
  return /* @__PURE__ */ jsx(Fragment, { children: reactHTML });
};
Tailwind.displayName = "Tailwind";
function getMediaQueryCSS(css) {
  const mediaQueryRegex = /@media[^{]+\{(?<content>[\s\S]+?)\}\s*\}/gm;
  let newCss = css.replace(mediaQueryRegex, (m) => {
    return m.replace(
      /([^{]+\{)([\s\S]+?)(\}\s*\})/gm,
      (_, start, content, end) => {
        const newcontent = content.replace(
          /(?:[\s\r\n]*)?(?<prop>[\w-]+)\s*:\s*(?<value>[^;\r\n]+)/gm,
          (_2, prop, value) => {
            return `${prop}: ${value} !important`;
          }
        );
        return `${start}${newcontent}${end}`;
      }
    );
  }).replace(/[.\!\#\w\d\\:\-\[\]\/\.%]+\s*?{/g, (m) => {
    return m.replace(/(?<=.)[:#\!\-[\\\]\/\.%]+/g, "_");
  }).replace(/font-family(?<value>[^;\r\n]+)/g, (m, value) => {
    return `font-family${value.replace(/['"]+/g, "")}`;
  });
  return newCss;
}
export {
  Tailwind
};
