{"mappings":";;;;;;;;;;;;;;;A;;;;;ACOA;;oGAEA,CAEA,MAAMM,0BAAI,GAAG,QAAb,AAAA;AAqBA,MAAMN,yCAAM,GAAA,aAAGE,CAAAA,uBAAA,CAA6C,CAACM,KAAD,EAAQC,YAAR,GAAyB;IACnF,MAAM,EAAEC,OAAO,EAAEC,WAAX,CAAA,kBAAwBC,cAAc,GAAG,KAAzC,G,iBAAgDC,eAAhD,CAAA,EAAiE,GAAGC,WAAH,EAAjE,GAAoFN,KAA1F,AAAM;IAEN,MAAM,CAACE,OAAO,GAAG,KAAX,EAAkBK,UAAlB,CAAA,GAAgCX,4DAAoB,CAAC;QACzDY,IAAI,EAAEL,WADmD;QAEzDM,QAAQ,EAAEJ,eAF+C;QAGzDK,WAAW,EAAEN,cAAbM;KAHwD,CAA1D,AAA2D;IAM3D,OAAA,aACE,CAAA,0BAAA,CAAC,sCAAD,CAAW,MAAX,EADF,2DAAA,CAAA;QAEI,IAAI,EAAC,QADP;QAEE,cAAA,EAAcR,OAFhB;QAGE,YAAA,EAAYA,OAAO,GAAG,IAAH,GAAU,KAH/B;QAIE,eAAA,EAAeF,KAAK,CAACW,QAAN,GAAiB,EAAjB,GAAsBC,SAArC;KAJF,EAKMN,WALN,EAAA;QAME,GAAG,EAAEL,YANP;QAOE,OAAO,EAAEN,4CAAoB,CAACK,KAAK,CAACa,OAAP,EAAgB,IAAM;YACjD,IAAI,CAACb,KAAK,CAACW,QAAX,EACEJ,UAAU,CAAC,CAACL,OAAF,CAAV,CAAAK;SAFyB,CAI5B;KAXH,CAAA,CADF,CACE;CAVW,CAAf,AAwBC;AAED,aAAA,CAAA,MAAA,CAAA,MAAA,CAAA,yCAAA,EAAA;IAAA,WAAA,EAAA,0BAAA;CAAA,CAAA,CAAA;AAEA,oGAAA,CAEA,MAAMd,yCAAI,GAAGD,yCAAb,AAAA;;AD9DA","sources":["packages/react/toggle/src/index.ts","packages/react/toggle/src/Toggle.tsx"],"sourcesContent":["export {\n  Toggle,\n  //\n  Root,\n} from './Toggle';\nexport type { ToggleProps } from './Toggle';\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Toggle\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Toggle';\n\ntype ToggleElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface ToggleProps extends PrimitiveButtonProps {\n  /**\n   * The controlled state of the toggle.\n   */\n  pressed?: boolean;\n  /**\n   * The state of the toggle when initially rendered. Use `defaultPressed`\n   * if you do not need to control the state of the toggle.\n   * @defaultValue false\n   */\n  defaultPressed?: boolean;\n  /**\n   * The callback that fires when the state of the toggle changes.\n   */\n  onPressedChange?(pressed: boolean): void;\n}\n\nconst Toggle = React.forwardRef<ToggleElement, ToggleProps>((props, forwardedRef) => {\n  const { pressed: pressedProp, defaultPressed = false, onPressedChange, ...buttonProps } = props;\n\n  const [pressed = false, setPressed] = useControllableState({\n    prop: pressedProp,\n    onChange: onPressedChange,\n    defaultProp: defaultPressed,\n  });\n\n  return (\n    <Primitive.button\n      type=\"button\"\n      aria-pressed={pressed}\n      data-state={pressed ? 'on' : 'off'}\n      data-disabled={props.disabled ? '' : undefined}\n      {...buttonProps}\n      ref={forwardedRef}\n      onClick={composeEventHandlers(props.onClick, () => {\n        if (!props.disabled) {\n          setPressed(!pressed);\n        }\n      })}\n    />\n  );\n});\n\nToggle.displayName = NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = Toggle;\n\nexport {\n  Toggle,\n  //\n  Root,\n};\nexport type { ToggleProps };\n"],"names":["Toggle","Root","React","composeEventHandlers","useControllableState","Primitive","NAME","forwardRef","props","forwardedRef","pressed","pressedProp","defaultPressed","onPressedChange","buttonProps","setPressed","prop","onChange","defaultProp","disabled","undefined","onClick"],"version":3,"file":"index.js.map"}