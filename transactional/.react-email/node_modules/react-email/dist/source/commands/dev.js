"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dev = void 0;
const utils_1 = require("../utils");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const components_1 = require("../_preview/components");
const utils_2 = require("../_preview/utils");
const root_1 = require("../_preview/root");
const pages_1 = require("../_preview/pages");
const detect_package_manager_1 = require("detect-package-manager");
const log_symbols_1 = __importDefault(require("log-symbols"));
const find_root_1 = require("@manypkg/find-root");
const ora_1 = __importDefault(require("ora"));
const read_pkg_1 = __importDefault(require("read-pkg"));
const shelljs_1 = __importDefault(require("shelljs"));
const styles_1 = require("../_preview/styles");
const dev = async ({ dir, port }) => {
    const emailDir = convertToAbsolutePath(dir);
    const watcherInstance = (0, utils_1.createWatcherInstance)(emailDir);
    try {
        const hasReactEmailDirectory = (0, utils_1.checkDirectoryExist)(utils_1.REACT_EMAIL_ROOT);
        const cwd = await (0, find_root_1.findRoot)(utils_1.CURRENT_PATH).catch(() => ({
            rootDir: utils_1.CURRENT_PATH,
        }));
        const packageManager = await (0, detect_package_manager_1.detect)({
            cwd: cwd.rootDir,
        }).catch(() => 'npm');
        if (hasReactEmailDirectory) {
            const isUpToDate = await (0, utils_1.checkPackageIsUpToDate)();
            if (isUpToDate) {
                await Promise.all([generateEmailsPreview(emailDir), syncPkg()]);
                await installDependencies(packageManager);
                startDevServer(packageManager, port);
                (0, utils_1.watcher)(watcherInstance, emailDir);
                return;
            }
            await fs_1.default.promises.rm(utils_1.REACT_EMAIL_ROOT, { recursive: true });
        }
        await createBasicStructure();
        await createAppDirectories();
        await createAppFiles();
        await Promise.all([generateEmailsPreview(emailDir), syncPkg()]);
        await installDependencies(packageManager);
        startDevServer(packageManager, port);
        (0, utils_1.watcher)(watcherInstance, emailDir);
    }
    catch (error) {
        await watcherInstance.close();
        shelljs_1.default.exit(1);
    }
};
exports.dev = dev;
const startDevServer = (packageManager, port) => {
    shelljs_1.default.exec(`${packageManager} run dev -- -p ${port}`, { async: true });
};
const convertToAbsolutePath = (dir) => path_1.default.isAbsolute(dir) ? dir : path_1.default.join(process.cwd(), dir);
const createBasicStructure = async () => {
    try {
        // Create `.react-email` directory
        await (0, utils_1.createDirectory)(utils_1.REACT_EMAIL_ROOT);
        // Create `src` and `public` directories
        await Promise.all([
            (0, utils_1.createDirectory)(utils_1.SRC_PATH),
            (0, utils_1.createDirectory)(utils_1.PUBLIC_PATH),
        ]);
    }
    catch (error) {
        throw new Error('Error creating the basic structure');
    }
};
const createAppDirectories = async () => {
    try {
        await Promise.all([
            (0, utils_1.createDirectory)(path_1.default.join(utils_1.SRC_PATH, 'components')),
            (0, utils_1.createDirectory)(path_1.default.join(utils_1.SRC_PATH, 'utils')),
            (0, utils_1.createDirectory)(path_1.default.join(utils_1.SRC_PATH, 'pages')),
            (0, utils_1.createDirectory)(path_1.default.join(utils_1.SRC_PATH, 'styles')),
        ]);
    }
    catch (error) {
        throw new Error('Error creating app directories');
    }
};
const createAppFiles = async () => {
    try {
        const creation = (appFiles, name) => {
            return appFiles.map((file) => {
                const location = name
                    ? `${utils_1.SRC_PATH}/${name}/${file.title}`
                    : `${utils_1.REACT_EMAIL_ROOT}/${file.title}`;
                return fs_1.default.promises.writeFile(location, file.content);
            });
        };
        const pageCreation = pages_1.pages.map(async (page) => {
            const location = page.dir
                ? `${utils_1.SRC_PATH}/pages/${page.dir}/${page.title}`
                : `${utils_1.SRC_PATH}/pages/${page.title}`;
            if (page.dir) {
                await (0, utils_1.createDirectory)(`${utils_1.SRC_PATH}/pages/${page.dir}`);
            }
            return fs_1.default.promises.writeFile(location, page.content);
        });
        await Promise.all([
            ...creation(utils_2.utils, 'utils'),
            ...creation(components_1.components, 'components'),
            ...creation(styles_1.styles, 'styles'),
            ...creation(root_1.root),
            ...pageCreation,
        ]);
    }
    catch (error) {
        throw new Error('Error creating app files');
    }
};
const generateEmailsPreview = async (emailDir) => {
    try {
        const spinner = (0, ora_1.default)('Generating emails preview').start();
        await createEmailPreviews(emailDir);
        await createStaticFiles(emailDir);
        spinner.stopAndPersist({
            symbol: log_symbols_1.default.success,
            text: 'Emails preview generated',
        });
    }
    catch (error) {
        console.log({ error });
    }
};
const createEmailPreviews = async (emailDir) => {
    const hasEmailsDirectory = (0, utils_1.checkDirectoryExist)(emailDir);
    if (hasEmailsDirectory) {
        await (0, utils_1.checkEmptyDirectory)(emailDir);
    }
    const hasPackageEmailsDirectory = (0, utils_1.checkDirectoryExist)(utils_1.PACKAGE_EMAILS_PATH);
    if (hasPackageEmailsDirectory) {
        await fs_1.default.promises.rm(utils_1.PACKAGE_EMAILS_PATH, { recursive: true });
    }
    const result = shelljs_1.default.cp('-r', emailDir, utils_1.PACKAGE_EMAILS_PATH);
    if (result.code > 0) {
        throw new Error(`Something went wrong while copying the file to ${utils_1.PACKAGE_EMAILS_PATH}, ${result.cat()}`);
    }
};
const createStaticFiles = async (emailDir) => {
    const reactEmailPublicFolder = path_1.default.join(utils_1.REACT_EMAIL_ROOT, 'public', 'static');
    const hasPackageStaticDirectory = (0, utils_1.checkDirectoryExist)(reactEmailPublicFolder);
    if (hasPackageStaticDirectory) {
        await fs_1.default.promises.rm(reactEmailPublicFolder, {
            recursive: true,
        });
    }
    // Make sure that the "static" folder does not exists in .react-email/emails
    // since it should only exists in .react-email/public, but the "createEmailPreviews"-function will blindly copy the complete emails folder
    const reactEmailEmailStaticFolder = path_1.default.join(utils_1.REACT_EMAIL_ROOT, 'emails', 'static');
    const hasPackageStaticDirectoryInEmails = (0, utils_1.checkDirectoryExist)(reactEmailEmailStaticFolder);
    if (hasPackageStaticDirectoryInEmails) {
        await fs_1.default.promises.rm(reactEmailEmailStaticFolder, {
            recursive: true,
        });
    }
    const staticDir = path_1.default.join(emailDir, 'static');
    const hasStaticDirectory = (0, utils_1.checkDirectoryExist)(staticDir);
    if (hasStaticDirectory) {
        const result = shelljs_1.default.cp('-r', staticDir, reactEmailPublicFolder);
        if (result.code > 0) {
            throw new Error(`Something went wrong while copying the file to ${reactEmailPublicFolder}, ${result.cat()}`);
        }
    }
};
const syncPkg = async () => {
    const previewPkg = (0, utils_1.getPreviewPkg)();
    const clientPkg = await (0, read_pkg_1.default)();
    const pkg = {
        ...previewPkg,
        dependencies: {
            ...previewPkg.dependencies,
            ...clientPkg.dependencies,
        },
    };
    await fs_1.default.promises.writeFile(path_1.default.join(utils_1.REACT_EMAIL_ROOT, 'package.json'), JSON.stringify(pkg));
};
const installDependencies = async (packageManager) => {
    const spinner = (0, ora_1.default)('Installing dependencies...\n').start();
    shelljs_1.default.cd(path_1.default.join(utils_1.REACT_EMAIL_ROOT));
    shelljs_1.default.exec(`${packageManager} install`);
    spinner.stopAndPersist({
        symbol: log_symbols_1.default.success,
        text: 'Dependencies installed',
    });
};
